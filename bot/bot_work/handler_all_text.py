from bot.bot_work.handler import Handler
from telegram.ext import MessageHandler, Filters
from business_logic.massage import MESSAGES


class HandlerAllText(Handler):
    """
    –ö–ª–∞—Å—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
    """

    def __init__(self, bot):
        super().__init__(bot)

    def menu_finanse(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–æ–∫—É '–§–∏–Ω–∞–Ω—Å—ã'.
        """
        verification_result = self.verification.user_verification(update)
        if verification_result == 1:
            update.message.reply_text(text='–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏:\n'
                                           '1. –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏ -> –ö–Ω–æ–ø–∫–∞ Add_goal\n',
                                      reply_markup=self.keybords.menu_fin_1())
        elif verification_result == 2:
            update.message.reply_text(text='–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –¥–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü:\n'
                                           '1. –í–Ω–µ—Å—Ç–∏ –¥–æ—Ö–æ–¥—ã -> –ö–Ω–æ–ø–∫–∞ Add_income\n',
                                      reply_markup=self.keybords.menu_fin_2())
        elif verification_result == 3:
            update.message.reply_text(text='–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Ö–æ–¥—ã, –Ω–æ —É–≤—ã –Ω–µ—Ç —Ü–µ–ª–µ–π(\n'
                                           '–î–∞–≤–∞–π —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–º\n'
                                           '1. –í–Ω–µ—Å—Ç–∏ –¶–µ–ª—å -> –ö–Ω–æ–ø–∫–∞ Add_goal\n',
                                      reply_markup=self.keybords.menu_fin_1())
        elif verification_result == 4:
            update.message.reply_text(text='–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é\n\n'
                                           '–†–∞–±–æ—Ç–∞ —Å —Ü–µ–ª—è–º–∏:\n'
                                           '1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–ª–∏ -> –ö–Ω–æ–ø–∫–∞ List_goal \n'
                                           '2. –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–∏ -> –ö–Ω–æ–ø–∫–∞ Edit_goal\n'
                                           '3. –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏ -> –ö–Ω–æ–ø–∫–∞ Add_goal\n\n'
                                           '–†–∞–±–æ—Ç–∞ —Å –¥–æ—Ö–æ–¥–∞–º–∏:\n'
                                           '4. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Ö–æ–¥—ã -> –ö–Ω–æ–ø–∫–∞ List_income\n'
                                           '5. –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Ö–æ–¥—ã -> –ö–Ω–æ–ø–∫–∞ Edit_income\n'
                                           '6. –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥—ã -> –ö–Ω–æ–ø–∫–∞ Add_income\n\n'
                                           '–ï—Å–ª–∏ –≤—Å–µ –û–∫! –ü–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏\n'
                                           '7. –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ -> –í–≤–µ–¥–∏ —Ç–µ–∫—Å\n'
                                           '(–§–æ—Ä–º–∞—Ç 200 1 –ï–¥–∞)\n'
                                           '–ì–¥–µ: 200 - —Ü–µ–Ω–∞,\n'
                                           '1 - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,\n'
                                           '–ï–¥–∞ - –¶–µ–ª—å(—Ä–∞—Å—Ö–æ–¥)\n'
                                           '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã!!!!',
                                      reply_markup=self.keybords.menu_fin_3()) # TODO: –î–æ–¥–µ–ª–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–æ–¥,
        elif verification_result == 5:
            update.message.reply_text(text='–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏:\n'
                                           '1. –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏ -> –ö–Ω–æ–ø–∫–∞ Add_goal\n',
                                      reply_markup=self.keybords.menu_fin_1())

    def menu_info(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–æ–∫—É '–û –ø—Ä–æ–µ–∫—Ç–µ'.
        """
        # update.message.text
        update.message.reply_text(MESSAGES['trading_store'],
                                  parse_mode='HTML',
                                  reply_markup=self.keybords.info_menu())  # TODO: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    def menu_settings(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–æ–∫—É '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'.
        """
        update.message.reply_text(MESSAGES['settings'],
                                  parse_mode='HTML',
                                  reply_markup=self.keybords.settings_menu())  # TODO: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    def menu_back(self, update, context):
        """
        –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'.
        """
        update.message.reply_text(text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥",
                                  reply_markup=self.keybords.start_menu())

    def list_goal(self, update, context):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π –∏–∑ –ë–î"""
        number_goal_id = 0
        list_goal = self.goal.load_purposes()
        update.message.reply_text('–í–æ—Ç —Ç–≤–æ–∏ —Ü–µ–ª–∏:\n')
        for goal in list_goal:
            user_id_purposes = int(goal.user_id_purposes)
            aliases = goal.aliases,
            price = goal.price,
            data = goal.data

            if update.message.from_user.id == user_id_purposes:
                number_goal_id += 1
                update.message.reply_text(MESSAGES['goal_list'].format(number_goal_id, aliases[0], price[0], data),
                                          parse_mode='HTML')

        self.menu_finanse(update, context)

    def list_income(self, update, context):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏–∑ –ë–î"""
        number_goal_id = 0
        list_income = self.income.load_income()
        update.message.reply_text('–í–æ—Ç —Ç–≤–æ–∏ –¥–æ—Ö–æ–¥—ã:\n')
        for income in list_income:
            user_id_purposes = int(income.user_id_purposes),
            price = income.price,
            title_income = income.title_income

            if update.message.from_user.id == user_id_purposes[0]:
                number_goal_id += 1
                update.message.reply_text(MESSAGES['list_income'].format(number_goal_id, title_income, price[0]),
                                          parse_mode='HTML')

        self.menu_finanse(update, context)

    def add_expense(self, update, context):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ –≤ –ë–î"""

        for palse_user in self.parse.list_from_message(update):
            aliases = palse_user.alias,
            price = palse_user.price,
            quantity = palse_user.quantity,
            raw_text = palse_user.raw_text

            self.BD.insert_db_expenses_needs(user_id_purposes=update.message.from_user.id,
                                             codename='None',
                                             category='None',
                                             aliases=aliases[0],
                                             price=price[0],
                                             quantity=quantity[0],
                                             raw_text=raw_text
                                             )
            update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç—Ä–∞—Ç—ã {price[0]} —Ä—É–± –Ω–∞ {aliases[0]}.")
            self.parse.list_parse.clear()
            self.menu_finanse(update, context)

    def handle(self):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫.
        """
        # ============ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ñ–∏–Ω–∞–Ω—Å—ã –ø–æ—Å–ª–µ start_menu ==========
        self.bot.add_handler(MessageHandler(Filters.text('üìë –§–∏–Ω–∞–Ω—Å—ã'), callback=self.menu_finanse))
        self.bot.add_handler(MessageHandler(Filters.text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'), callback=self.menu_settings))
        self.bot.add_handler(MessageHandler(Filters.text('üí¨ –û –ø—Ä–æ–µ–∫—Ç–µ'), callback=self.menu_info))

        self.bot.add_handler(MessageHandler(Filters.text('List_goal'), callback=self.list_goal))
        self.bot.add_handler(MessageHandler(Filters.text('List_income'), callback=self.list_income))

        self.bot.add_handler(MessageHandler(Filters.text('‚è™'), callback=self.menu_back))
        self.bot.add_handler(MessageHandler(Filters.text, callback=self.add_expense))
